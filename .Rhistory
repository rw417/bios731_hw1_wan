end_wald <- proc.time()[3]
bs_runtime['wald'] <- bs_runtime['wald'] + end_wald - start_wald
start_percentile <- proc.time()[3]
percentile = percentile_estimates(sim_beta_hat, bs_results, beta_true = params$beta_true, alpha = 0.05)
end_percentile <- proc.time()[3]
bs_runtime['percentile'] <- bs_runtime['percentile'] + end_percentile - start_percentile
start_t <- proc.time()[3]
t = t_estimates(sim_beta_hat, bs_results, beta_true = params$beta_true, alpha = 0.05)
end_t <- proc.time()[3]
bs_runtime['t'] <- bs_runtime['t'] + end_t - start_t
# Store results in a structured format
bs_runtime <- c(bs_runtime, 0)
rbind(wald,percentile,t,bs_runtime)
}
# Store results into each of the matrices
wald_results <- foreach_results[seq(1, 4*nsim, by=4),]
percentile_results <- foreach_results[seq(2, 4*nsim, by=4),]
t_results <- foreach_results[seq(3, 4*nsim, by=4),]
bs_runtime_results <- foreach_results[seq(4, 4*nsim, by=4),]
final_results <- list(
wald_results <- foreach_results[seq(1, 4*nsim, by=4),],
percentile_results <- foreach_results[seq(2, 4*nsim, by=4),],
t_results <- foreach_results[seq(3, 4*nsim, by=4),],
bs_runtime_results <- foreach_results[seq(4, 4*nsim, by=4),]
)
# Convert results into structured lists
# final_results <- list(
#   wald = do.call(rbind, lapply(final_results, function(x) x[[1]])),
#   percentile = do.call(rbind, lapply(final_results, function(x) x[[2]])),
#   t = do.call(rbind, lapply(final_results, function(x) x[[3]])),
#   bs_runtime = do.call(rbind, lapply(final_results, function(x) x[[4]]))
# )
####################
# save results
# note that I am saving results outside of the for loop. For slow simulations,
# you may want to save each iteration separately
filename <- paste0("20250204_scenario_", scenario, ".RDS")
saveRDS(final_results,
file = here::here("30_results", filename)
)
print(paste("Finished scenario: ", scenario))
print(Sys.time())
}
results <- readRDS(here::here("30_results", paste0("20250204_scenario_", 1, ".RDS")))
results[[4]]
library(stats)
library(foreach)
library(doParallel)
source(here::here("10_source", "01_simulate_data.R"))
source(here::here("10_source", "02_apply_methods.R"))
source(here::here("10_source", "03_extract_estimates.R"))
source(here::here("10_source", "04_three_bootstrap_estimates.R"))
source(here::here("10_source", "05_run_bootstrap.R"))
# nsim calculated based on desired coverage of 95%
# with Monte Carlo error of no more than 1%
nsim <- 475
nboot <- 200
stopCluster(cl) # Shut down cluster
stopCluster()
if (!is.null(getOption("cl"))) {
stopCluster(getOption("cl"))
options(cl = NULL)
}
getOption("cl")
# Setup parallel backend
ncores <- detectCores() - 2 # Use available cores minus one
cl <- makeCluster(ncores, port=12000)
registerDoParallel(cl)
# nsim calculated based on desired coverage of 95%
# with Monte Carlo error of no more than 1%
nsim <- 475
nboot <- 400
nboot_t <- 100
nrow(params_grid)
params_grid <- expand.grid(
n = n,
nsim = nsim,
beta_true = beta_true,
error_form = error_form,
error_sigma2 = error_sigma2
)
n <- c(10, 50, 100)
beta_true <- c(0, 0.5, 2)
error_form <- c("normal", "lognormal")
error_sigma2 <- c(2)
params_grid <- expand.grid(
n = n,
nsim = nsim,
beta_true = beta_true,
error_form = error_form,
error_sigma2 = error_sigma2
)
# Setup parallel backend
ncores <- detectCores() - 2 # Use available cores minus one
nrow(params_grid)
results[[4]]
results[[4]]
# Loop through all simulations
for (scenario in 1:nrow(params_grid)) {
params <- params_grid[scenario, ]
# Generate a random seed for each simulated dataset
seed <- floor(runif(nsim, 1, 10000))
# Genereate a list of matrices to store results
# sim_results <- replicate(3, matrix(NA,
#   nrow = nsim, ncol = 5,
#   dimnames = list(
#     NULL, c("sim_beta_hat", "se_b", "ci_lower", "ci_upper", "coverage")
#   )
# ), simplify = FALSE)
#
# bs_runtime_results <- list(matrix(NA, nrow=nsim, ncol=3,
#   dimnames = list(
#     NULL, c("wald", "percentile", "t")
#   )))
# Combine the matrices into a single list
# final_results <- c(sim_results, bs_runtime_results)
# names(final_results) <- c("wald", "percentile", "t", "bs_runtime")
print(paste("Running scenario: ", scenario))
print(Sys.time())
# Run simulation in parallel
foreach_results <- foreach(
i = 1:nsim, .combine = rbind, .multicombine = FALSE,
.packages = c("here", "stats", "dplyr", "broom"),
.export = c(
"get_simdata", "fit_model", "get_estimates",
"run_bootstrap", "wald_estimates",
"percentile_estimates", "t_estimates"
)
) %dopar% {
# Set seed for reproducibility within each worker
set.seed(seed[i])
# if (i %% 50 == 0) {
#   message(paste("Reached simulation: ", i))
#   flush.console()
# }
####################
# Simulate data
simdata <- get_simdata(
n = params$n,
beta_treat = params$beta_true,
error_form = params$error_form,
error_sigma2 = params$error_sigma2
)
####################
# Apply model on simulated data
sim_fit <- fit_model(simdata)
####################
# Calculate simulation estimates
sim_beta_hat <- get_estimates(model_fit = sim_fit)
#####################
# Run bootstrap on simulated data using different methods
loop_results <- run_bootstrap(simdata, sim_beta_hat, nboot, nboot_t)
bs_results <- loop_results[[1]]
bs_runtime <- loop_results[[2]]
#####################
# Calculate bootstrap estimates
start_wald <- proc.time()[3]
wald = wald_estimates(sim_beta_hat, bs_results, beta_true = params$beta_true, alpha = 0.05)
end_wald <- proc.time()[3]
bs_runtime['wald'] <- bs_runtime['wald'] + end_wald - start_wald
start_percentile <- proc.time()[3]
percentile = percentile_estimates(sim_beta_hat, bs_results, beta_true = params$beta_true, alpha = 0.05)
end_percentile <- proc.time()[3]
bs_runtime['percentile'] <- bs_runtime['percentile'] + end_percentile - start_percentile
start_t <- proc.time()[3]
t = t_estimates(sim_beta_hat, bs_results, beta_true = params$beta_true, alpha = 0.05)
end_t <- proc.time()[3]
bs_runtime['t'] <- bs_runtime['t'] + end_t - start_t
# Store results in a structured format
bs_runtime <- c(bs_runtime, 0)
rbind(wald,percentile,t,bs_runtime)
}
# Store results into each of the matrices
wald_results <- foreach_results[seq(1, 4*nsim, by=4),]
percentile_results <- foreach_results[seq(2, 4*nsim, by=4),]
t_results <- foreach_results[seq(3, 4*nsim, by=4),]
bs_runtime_results <- foreach_results[seq(4, 4*nsim, by=4),]
final_results <- list(
wald_results <- foreach_results[seq(1, 4*nsim, by=4),],
percentile_results <- foreach_results[seq(2, 4*nsim, by=4),],
t_results <- foreach_results[seq(3, 4*nsim, by=4),],
bs_runtime_results <- foreach_results[seq(4, 4*nsim, by=4),]
)
# Convert results into structured lists
# final_results <- list(
#   wald = do.call(rbind, lapply(final_results, function(x) x[[1]])),
#   percentile = do.call(rbind, lapply(final_results, function(x) x[[2]])),
#   t = do.call(rbind, lapply(final_results, function(x) x[[3]])),
#   bs_runtime = do.call(rbind, lapply(final_results, function(x) x[[4]]))
# )
####################
# save results
# note that I am saving results outside of the for loop. For slow simulations,
# you may want to save each iteration separately
filename <- paste0("20250204_scenario_", scenario, ".RDS")
saveRDS(final_results,
file = here::here("30_results", filename)
)
print(paste("Finished scenario: ", scenario))
print(Sys.time())
}
nrow(params_grid)
stopCluster(cl) # Shut down cluster
# Setup parallel backend
ncores <- detectCores() - 2 # Use available cores minus one
cl <- makeCluster(ncores, port=12000)
registerDoParallel(cl)
# Loop through all simulations
for (scenario in 2:nrow(params_grid)) {
params <- params_grid[scenario, ]
# Generate a random seed for each simulated dataset
seed <- floor(runif(nsim, 1, 10000))
# Genereate a list of matrices to store results
# sim_results <- replicate(3, matrix(NA,
#   nrow = nsim, ncol = 5,
#   dimnames = list(
#     NULL, c("sim_beta_hat", "se_b", "ci_lower", "ci_upper", "coverage")
#   )
# ), simplify = FALSE)
#
# bs_runtime_results <- list(matrix(NA, nrow=nsim, ncol=3,
#   dimnames = list(
#     NULL, c("wald", "percentile", "t")
#   )))
# Combine the matrices into a single list
# final_results <- c(sim_results, bs_runtime_results)
# names(final_results) <- c("wald", "percentile", "t", "bs_runtime")
print(paste("Running scenario: ", scenario))
print(Sys.time())
# Run simulation in parallel
foreach_results <- foreach(
i = 1:nsim, .combine = rbind, .multicombine = FALSE,
.packages = c("here", "stats", "dplyr", "broom"),
.export = c(
"get_simdata", "fit_model", "get_estimates",
"run_bootstrap", "wald_estimates",
"percentile_estimates", "t_estimates"
)
) %dopar% {
# Set seed for reproducibility within each worker
set.seed(seed[i])
# if (i %% 50 == 0) {
#   message(paste("Reached simulation: ", i))
#   flush.console()
# }
####################
# Simulate data
simdata <- get_simdata(
n = params$n,
beta_treat = params$beta_true,
error_form = params$error_form,
error_sigma2 = params$error_sigma2
)
####################
# Apply model on simulated data
sim_fit <- fit_model(simdata)
####################
# Calculate simulation estimates
sim_beta_hat <- get_estimates(model_fit = sim_fit)
#####################
# Run bootstrap on simulated data using different methods
loop_results <- run_bootstrap(simdata, sim_beta_hat, nboot, nboot_t)
bs_results <- loop_results[[1]]
bs_runtime <- loop_results[[2]]
#####################
# Calculate bootstrap estimates
start_wald <- proc.time()[3]
wald = wald_estimates(sim_beta_hat, bs_results, beta_true = params$beta_true, alpha = 0.05)
end_wald <- proc.time()[3]
bs_runtime['wald'] <- bs_runtime['wald'] + end_wald - start_wald
start_percentile <- proc.time()[3]
percentile = percentile_estimates(sim_beta_hat, bs_results, beta_true = params$beta_true, alpha = 0.05)
end_percentile <- proc.time()[3]
bs_runtime['percentile'] <- bs_runtime['percentile'] + end_percentile - start_percentile
start_t <- proc.time()[3]
t = t_estimates(sim_beta_hat, bs_results, beta_true = params$beta_true, alpha = 0.05)
end_t <- proc.time()[3]
bs_runtime['t'] <- bs_runtime['t'] + end_t - start_t
# Store results in a structured format
bs_runtime <- c(bs_runtime, 0)
rbind(wald,percentile,t,bs_runtime)
}
# Store results into each of the matrices
wald_results <- foreach_results[seq(1, 4*nsim, by=4),]
percentile_results <- foreach_results[seq(2, 4*nsim, by=4),]
t_results <- foreach_results[seq(3, 4*nsim, by=4),]
bs_runtime_results <- foreach_results[seq(4, 4*nsim, by=4),]
final_results <- list(
wald_results <- foreach_results[seq(1, 4*nsim, by=4),],
percentile_results <- foreach_results[seq(2, 4*nsim, by=4),],
t_results <- foreach_results[seq(3, 4*nsim, by=4),],
bs_runtime_results <- foreach_results[seq(4, 4*nsim, by=4),]
)
# Convert results into structured lists
# final_results <- list(
#   wald = do.call(rbind, lapply(final_results, function(x) x[[1]])),
#   percentile = do.call(rbind, lapply(final_results, function(x) x[[2]])),
#   t = do.call(rbind, lapply(final_results, function(x) x[[3]])),
#   bs_runtime = do.call(rbind, lapply(final_results, function(x) x[[4]]))
# )
####################
# save results
# note that I am saving results outside of the for loop. For slow simulations,
# you may want to save each iteration separately
filename <- paste0("20250204_scenario_", scenario, ".RDS")
saveRDS(final_results,
file = here::here("30_results", filename)
)
print(paste("Finished scenario: ", scenario))
print(Sys.time())
}
# Construct a params_grid the same way as in 11_simulations/run_simulations.R
nsim = 475
beta_true <- c(0, 0.5, 2)
beta_true <- c(0, 0.5, 2)
error_form <- c("normal", "lognormal")
error_sigma2 <- c(2)
params_grid <- expand.grid(
n = n,
nsim = nsim,
beta_true = beta_true,
error_form = error_form,
error_sigma2 = error_sigma2
)
n_cols <- 7 # Excluding row names
# Initialize a data frame with row names
table_data <- data.frame(matrix(NA, nrow = n_rows, ncol = n_cols))
colnames(table_data) <- c("Bias", "Bias 95% CI", "St. Err.", "St. Err. 95% CI", "Cover Wald", "Cover Pct", "Cover BSt")
rownames(table_data) <- paste("Sc", 1:n_rows)
# Construct a params_grid the same way as in 11_simulations/run_simulations.R
nsim = 475
n <- c(10, 50, 100)
beta_true <- c(0, 0.5, 2)
error_form <- c("normal", "lognormal")
error_sigma2 <- c(2)
params_grid <- expand.grid(
n = n,
nsim = nsim,
beta_true = beta_true,
error_form = error_form,
error_sigma2 = error_sigma2
)
# Define table dimensions
n_rows <- 18 # Excluding header row
n_cols <- 7 # Excluding row names
# Initialize a data frame with row names
table_data <- data.frame(matrix(NA, nrow = n_rows, ncol = n_cols))
colnames(table_data) <- c("Bias", "Bias 95% CI", "St. Err.", "St. Err. 95% CI", "Cover Wald", "Cover Pct", "Cover BSt")
rownames(table_data) <- paste("Sc", 1:n_rows)
library(knitr)
stopCluster(cl) # Shut down cluster
rownames(table_data) <- paste("Sc", 1:n_rows)
# Populate the table with values using a loop
for (i in 1:n_rows) {
# Read in RDS file
results <- readRDS(here::here("30_results", paste0("20250204_scenario_", i, ".RDS")))
# Calculate the values to put into the cells
bias <- c(
signif(mean(results[[1]][, "sim_beta_hat"]) - params_grid[i,"beta_true"], 3),
signif(quantile(results[[1]][, "sim_beta_hat"], c(0.025, 0.975)) - params_grid[i,"beta_true"],3)
)
sterr <- c(
signif(mean(results[[1]][, "se_b"]), 3),
signif(quantile(results[[1]][, "se_b"], c(0.025, 0.975)), 3)
)
coverages <- sapply(results, function(mat) mean(mat[, "coverage"]))
# Fill the table with the calculated values
table_data[i, 1] <- bias[1]
table_data[i, 2] <- paste0("(", bias[2], ", ", bias[3], ")")
table_data[i, 3] <- sterr[1]
table_data[i, 4] <- paste0("(", sterr[2], ", ", sterr[3], ")")
table_data[i, 5] <- coverages[1]
table_data[i, 6] <- coverages[2]
table_data[i, 7] <- coverages[3]
}
# Print the table in RMarkdown format
kable(table_data, caption = "Summary of Simulation Results")
params_grid
sapply(results, function(mat) mean(mat[, "coverage"]))
results
colMeans(results[[4]])
colMeans(results[[4]])[1,2,4]
colMeans(results[[4]])[c(1,2,4)]
# Populate the table with values using a loop
for (i in 1:n_rows) {
# Read in RDS file
results <- readRDS(here::here("30_results", paste0("20250204_scenario_", i, ".RDS")))
# Calculate the values to put into the cells
bias <- c(
signif(mean(results[[1]][, "sim_beta_hat"]) - params_grid[i,"beta_true"], 3),
signif(quantile(results[[1]][, "sim_beta_hat"], c(0.025, 0.975)) - params_grid[i,"beta_true"],3)
)
sterr <- c(
signif(mean(results[[1]][, "se_b"]), 3),
signif(quantile(results[[1]][, "se_b"], c(0.025, 0.975)), 3)
)
coverages <- sapply(results, function(mat) mean(mat[, "coverage"]))
runtimes <- colMeans(results[[4]])[c(1,2,4)]
# Fill the table with the calculated values
table_data[i, 1] <- bias[1]
table_data[i, 2] <- paste0("(", bias[2], ", ", bias[3], ")")
table_data[i, 3] <- sterr[1]
table_data[i, 4] <- paste0("(", sterr[2], ", ", sterr[3], ")")
table_data[i, 5] <- coverages[1]
table_data[i, 6] <- coverages[2]
table_data[i, 7] <- coverages[3]
table_data[i, 8] <- runtimes[1]
table_data[i, 9] <- runtimes[2]
table_data[i, 10] <- runtimes[3]
}
# Print the table in RMarkdown format
kable(table_data, caption = "Summary of Simulation Results")
# Initialize a data frame with row names
table_data <- data.frame(matrix(NA, nrow = n_rows, ncol = n_cols))
colnames(table_data) <- c("Bias", "Bias 95% CI", "St. Err.", "St. Err. 95% CI", "Cover Wald", "Cover Pct", "Cover BSt", "Time Wald", "Time Pct", "Time BSt")
rownames(table_data) <- paste("Sc", 1:n_rows)
# Initialize a data frame with row names
table_data <- data.frame(matrix(NA, nrow = n_rows, ncol = n_cols))
colnames(table_data) <- c("Bias", "Bias 95% CI", "St. Err.", "St. Err. 95% CI", "Cover Wald", "Cover Pct", "Cover BSt", "Time Wald", "Time Pct", "Time BSt")
rownames(table_data) <- paste("Sc", 1:n_rows)
n_cols <- 10 # Excluding row names
# Initialize a data frame with row names
table_data <- data.frame(matrix(NA, nrow = n_rows, ncol = n_cols))
colnames(table_data) <- c("Bias", "Bias 95% CI", "St. Err.", "St. Err. 95% CI", "Cover Wald", "Cover Pct", "Cover BSt", "Time Wald", "Time Pct", "Time BSt")
rownames(table_data) <- paste("Sc", 1:n_rows)
# Populate the table with values using a loop
for (i in 1:n_rows) {
# Read in RDS file
results <- readRDS(here::here("30_results", paste0("20250204_scenario_", i, ".RDS")))
# Calculate the values to put into the cells
bias <- c(
signif(mean(results[[1]][, "sim_beta_hat"]) - params_grid[i,"beta_true"], 3),
signif(quantile(results[[1]][, "sim_beta_hat"], c(0.025, 0.975)) - params_grid[i,"beta_true"],3)
)
sterr <- c(
signif(mean(results[[1]][, "se_b"]), 3),
signif(quantile(results[[1]][, "se_b"], c(0.025, 0.975)), 3)
)
coverages <- sapply(results, function(mat) mean(mat[, "coverage"]))
runtimes <- colMeans(results[[4]])[c(1,2,4)]
# Fill the table with the calculated values
table_data[i, 1] <- bias[1]
table_data[i, 2] <- paste0("(", bias[2], ", ", bias[3], ")")
table_data[i, 3] <- sterr[1]
table_data[i, 4] <- paste0("(", sterr[2], ", ", sterr[3], ")")
table_data[i, 5] <- coverages[1]
table_data[i, 6] <- coverages[2]
table_data[i, 7] <- coverages[3]
table_data[i, 8] <- runtimes[1]
table_data[i, 9] <- runtimes[2]
table_data[i, 10] <- runtimes[3]
}
# Print the table in RMarkdown format
kable(table_data, caption = "Summary of Simulation Results")
# Populate the table with values using a loop
for (i in 1:n_rows) {
# Read in RDS file
results <- readRDS(here::here("30_results", paste0("20250204_scenario_", i, ".RDS")))
# Calculate the values to put into the cells
bias <- c(
signif(mean(results[[1]][, "sim_beta_hat"]) - params_grid[i,"beta_true"], 3),
signif(quantile(results[[1]][, "sim_beta_hat"], c(0.025, 0.975)) - params_grid[i,"beta_true"],3)
)
sterr <- c(
signif(mean(results[[1]][, "se_b"]), 3),
signif(quantile(results[[1]][, "se_b"], c(0.025, 0.975)), 3)
)
coverages <- sapply(results, function(mat) mean(mat[, "coverage"]))
runtimes <- colMeans(results[[4]])[c(1,2,4)]
# Fill the table with the calculated values
table_data[i, 1] <- bias[1]
table_data[i, 2] <- paste0("(", bias[2], ", ", bias[3], ")")
table_data[i, 3] <- sterr[1]
table_data[i, 4] <- paste0("(", sterr[2], ", ", sterr[3], ")")
table_data[i, 5] <- signif(coverages[1], 3)
table_data[i, 6] <- signif(coverages[2], 3)
table_data[i, 7] <- signif(coverages[3], 3)
table_data[i, 8] <- signif(runtimes[1], 3)
table_data[i, 9] <- signif(runtimes[2], 3)
table_data[i, 10] <- signif(runtimes[3], 3)
}
# Print the table in RMarkdown format
kable(table_data, caption = "Summary of Simulation Results")
# Populate the table with values using a loop
for (i in 1:n_rows) {
# Read in RDS file
results <- readRDS(here::here("30_results", paste0("20250204_scenario_", i, ".RDS")))
# Calculate the values to put into the cells
bias <- c(
signif(mean(results[[1]][, "sim_beta_hat"]) - params_grid[i,"beta_true"], 3),
signif(quantile(results[[1]][, "sim_beta_hat"], c(0.025, 0.975)) - params_grid[i,"beta_true"],3)
)
sterr <- c(
signif(mean(results[[1]][, "se_b"]), 3),
signif(quantile(results[[1]][, "se_b"], c(0.025, 0.975)), 3)
)
coverages <- sapply(results, function(mat) mean(mat[, "coverage"]))
runtimes <- colMeans(results[[4]])[c(1,2,4)]
# Fill the table with the calculated values
table_data[i, 1] <- bias[1]
table_data[i, 2] <- paste0("(", bias[2], ", ", bias[3], ")")
table_data[i, 3] <- sterr[1]
table_data[i, 4] <- paste0("(", sterr[2], ", ", sterr[3], ")")
table_data[i, 5] <- signif(coverages[1], 2)
table_data[i, 6] <- signif(coverages[2], 2)
table_data[i, 7] <- signif(coverages[3], 2)
table_data[i, 8] <- signif(runtimes[1], 2)
table_data[i, 9] <- signif(runtimes[2], 2)
table_data[i, 10] <- signif(runtimes[3], 2)
}
# Print the table in RMarkdown format
kable(table_data, caption = "Summary of Simulation Results")
