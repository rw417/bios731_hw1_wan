# sample with replacement from the original data
beta_hat_star <- sample(sim_results[, "beta_hat"],
size = nrow(sim_results),
replace = TRUE
)
####################
# Wald estimates
wald_result <- wald_estimates(
sim_results,
bs_samples = beta_hat_star, alpha = 0.05
)
bs_results[["wald"]][b, ] <- wald_result
####################
# Percentile estimates
percentile_result <- percentile_estimates(
sim_results,
bs_samples = beta_hat_star, alpha = 0.05
)
bs_results[["percentile"]][b, ] <- percentile_result
####################
# Bootstrap with t estimates
# Step 1: loop to run bootstrap t
boot_mean_b <- rep(NA, nboot_t)
for (k in 1:nboot_t) {
beta_hat_star_k <- sample(beta_hat_star,
size = nrow(sim_results),
replace = TRUE
)
boot_mean_b[k] <- mean(beta_hat_star_k)
}
# Step 2: generate estimates
t_result <- t_estimates(
sim_results,
bs_samples = beta_hat_star, boot_mean_b, alpha = 0.05
)
bs_results[["t"]][b, ] <- t_result
}
return(bs_results)
}
run_bootstrap(sim_results, 100,10)
replicate(3, matrix(NA,
nrow = nboot, ncol = 5,
dimnames = list(
NULL, c("mean_beta_hat", "se_b", "ci_lower", "ci_upper", "coverage")
)
), simplify=FALSE)
replicate(3, matrix(NA,
nrow = 6, ncol = 5,
dimnames = list(
NULL, c("mean_beta_hat", "se_b", "ci_lower", "ci_upper", "coverage")
)
), simplify=FALSE)
bs_results <- replicate(3, matrix(NA,
nrow = 7, ncol = 5,
dimnames = list(
NULL, c("mean_beta_hat", "se_b", "ci_lower", "ci_upper", "coverage")
)
), simplify=FALSE)
names(bs_results) <- c("wald", "percentile", "t")
bs_results
rm(bs_results)
dim(sim_results)
rm(run_bootstrap)
####################
# Run bootstrap on simulation results
run_bootstrap <- function(sim_results, nboot, nboot_t) {
# Create three matrices to store Wald, percentile, and t estimates
bs_results <- replicate(3, matrix(NA,
nrow = nboot, ncol = 5,
dimnames = list(
NULL, c("mean_beta_hat", "se_b", "ci_lower", "ci_upper", "coverage")
)
), simplify=FALSE)
names(bs_results) <- c("wald", "percentile", "t")
# beta_hat <- mean(sim_results[, "beta_hat"])
# loop over bootstrap samples
for (b in 1:nboot) {
# sample with replacement from the original data
beta_hat_star <- sample(sim_results[, "beta_hat"],
size = nrow(sim_results),
replace = TRUE
)
####################
# Wald estimates
wald_result <- wald_estimates(
sim_results,
bs_samples = beta_hat_star, alpha = 0.05
)
bs_results[["wald"]][b, ] <- wald_result
####################
# Percentile estimates
percentile_result <- percentile_estimates(
sim_results,
bs_samples = beta_hat_star, alpha = 0.05
)
bs_results[["percentile"]][b, ] <- percentile_result
####################
# Bootstrap with t estimates
# Step 1: loop to run bootstrap t
boot_mean_b <- rep(NA, nboot_t)
for (k in 1:nboot_t) {
beta_hat_star_k <- sample(beta_hat_star,
size = nrow(sim_results),
replace = TRUE
)
boot_mean_b[k] <- mean(beta_hat_star_k)
}
# Step 2: generate estimates
t_result <- t_estimates(
sim_results,
bs_samples = beta_hat_star, boot_mean_b, alpha = 0.05
)
bs_results[["t"]][b, ] <- t_result
}
return(bs_results)
}
run_bootstrap(sim_results, 100,10)
####################
# Calculate the Wald standard error and CI for all bootstrap runs
wald_estimates <- function(sim_results, bs_samples, alpha = 0.05) {
se_b <- sd(bs_samples)
mean_beta_hat <- mean(sim_results[, "beta_hat"])
ci_lower <- mean_beta_hat + qt(alpha / 2, df = nrow(bs_samples) - 1) * se_b
ci_upper <- mean_beta_hat + qt(1 - alpha / 2, df = nrow(bs_samples) - 1) * se_b
coverage <- mean(sim_results[1, "beta_true"] > ci_lower &
sim_results[1, "beta_true"] < ci_upper)
bs_estimates <- c(mean_beta_hat, se_b, ci_lower, ci_upper, coverage)
names(bs_estimates) <- c("mean_beta_hat", "se_b", "ci_lower", "ci_upper", "coverage")
return(bs_estimates)
}
####################
# Calculate the Wald standard error and percentile-based CI for all bootstrap runs
percentile_estimates <- function(sim_results, bs_samples, alpha = 0.05) {
se_b <- sd(bs_samples)
mean_beta_hat <- mean(sim_results[, "beta_hat"])
ci_lower <- quantile(bs_samples, alpha / 2)
ci_upper <- quantile(bs_samples, 1 - alpha / 2)
coverage <- mean(sim_results[1, "beta_true"] > ci_lower &
sim_results[1, "beta_true"] < ci_upper)
bs_estimates <- c(mean_beta_hat, se_b, ci_lower, ci_upper, coverage)
names(bs_estimates) <- c("mean_beta_hat", "se_b", "ci_lower", "ci_upper", "coverage")
return(bs_estimates)
}
####################
# Calculate the bootstrap t standard error and CI for all bootstrap runs
t_estimates <- function(sim_results, bs_samples, boot_mean_b, alpha = 0.05) {
se_b <- sd(bs_samples)
mean_beta_hat <- mean(sim_results[, "beta_hat"])
# Estimate t_star
se_star <- sd(boot_mean_b) # used only for estimating t_star
t_star <- (mean(bs_samples) - mean_beta_hat) / se_star
# Estimate CI
t_quants <- quantile(tstar, probs = c(alpha / 2, 1 - (alpha / 2)))
ci_lower <- mean_beta_hat - t_quants[2] * se_b
ci_upper <- mean_beta_hat - t_quants[1] * se_b
coverage <- mean(sim_results[1, "beta_true"] > ci_lower &
sim_results[1, "beta_true"] < ci_upper)
bs_estimates <- c(mean_beta_hat, se_b, ci_lower, ci_upper, coverage)
names(bs_estimates) <- c("mean_beta_hat", "se_b", "ci_lower", "ci_upper", "coverage")
return(bs_estimates)
}
run_bootstrap(sim_results, 100,10)
####################
# Run bootstrap on simulation results
run_bootstrap <- function(sim_results, nboot, nboot_t) {
# Create three matrices to store Wald, percentile, and t estimates
bs_results <- replicate(3, matrix(NA,
nrow = nboot, ncol = 5,
dimnames = list(
NULL, c("mean_beta_hat", "se_b", "ci_lower", "ci_upper", "coverage")
)
), simplify=FALSE)
names(bs_results) <- c("wald", "percentile", "t")
# beta_hat <- mean(sim_results[, "beta_hat"])
# loop over bootstrap samples
for (b in 1:nboot) {
# sample with replacement from the original data
beta_hat_star <- sample(sim_results[, "beta_hat"],
size = nrow(sim_results),
replace = TRUE
)
####################
# Wald estimates
wald_result <- wald_estimates(
sim_results,
bs_samples = beta_hat_star, alpha = 0.05
)
bs_results[["wald"]][b, ] <- wald_result
####################
# Percentile estimates
percentile_result <- percentile_estimates(
sim_results,
bs_samples = beta_hat_star, alpha = 0.05
)
bs_results[["percentile"]][b, ] <- percentile_result
####################
# Bootstrap with t estimates
# Step 1: loop to run bootstrap t
boot_mean_b <- rep(NA, nboot_t)
for (k in 1:nboot_t) {
beta_hat_star_k <- sample(beta_hat_star,
size = nrow(sim_results),
replace = TRUE
)
boot_mean_b[k] <- mean(beta_hat_star_k)
}
# Step 2: generate estimates
t_result <- t_estimates(
sim_results,
bs_samples = beta_hat_star, boot_mean_b, alpha = 0.05
)
bs_results[["t"]][b, ] <- t_result
}
return(bs_results)
}
rm(bs_results)
rm(run_bootstrap)
run_bootstrap(sim_results, 100,10)
####################
# Run bootstrap on simulation results
run_bootstrap <- function(sim_results, nboot, nboot_t) {
# Create three matrices to store Wald, percentile, and t estimates
bs_results <- replicate(3, matrix(NA,
nrow = nboot, ncol = 5,
dimnames = list(
NULL, c("mean_beta_hat", "se_b", "ci_lower", "ci_upper", "coverage")
)
), simplify=FALSE)
names(bs_results) <- c("wald", "percentile", "t")
# beta_hat <- mean(sim_results[, "beta_hat"])
# loop over bootstrap samples
for (b in 1:nboot) {
# sample with replacement from the original data
beta_hat_star <- sample(sim_results[, "beta_hat"],
size = nrow(sim_results),
replace = TRUE
)
####################
# Wald estimates
wald_result <- wald_estimates(
sim_results,
bs_samples = beta_hat_star, alpha = 0.05
)
bs_results[["wald"]][b, ] <- wald_result
####################
# Percentile estimates
percentile_result <- percentile_estimates(
sim_results,
bs_samples = beta_hat_star, alpha = 0.05
)
bs_results[["percentile"]][b, ] <- percentile_result
####################
# Bootstrap with t estimates
# Step 1: loop to run bootstrap t
boot_mean_b <- rep(NA, nboot_t)
for (k in 1:nboot_t) {
beta_hat_star_k <- sample(beta_hat_star,
size = nrow(sim_results),
replace = TRUE
)
boot_mean_b[k] <- mean(beta_hat_star_k)
}
# Step 2: generate estimates
t_result <- t_estimates(
sim_results,
bs_samples = beta_hat_star, boot_mean_b, alpha = 0.05
)
bs_results[["t"]][b, ] <- t_result
}
return(bs_results)
}
run_bootstrap(sim_results, 100,10)
####################
# Run bootstrap on simulation results
run_bootstrap <- function(sim_results, nboot, nboot_t) {
# Create three matrices to store Wald, percentile, and t estimates
bs_results <- replicate(3, matrix(NA,
nrow = nboot, ncol = 5
# dimnames = list(
#   NULL, c("mean_beta_hat", "se_b", "ci_lower", "ci_upper", "coverage")
# )
), simplify=FALSE)
names(bs_results) <- c("wald", "percentile", "t")
# beta_hat <- mean(sim_results[, "beta_hat"])
# loop over bootstrap samples
for (b in 1:nboot) {
# sample with replacement from the original data
beta_hat_star <- sample(sim_results[, "beta_hat"],
size = nrow(sim_results),
replace = TRUE
)
####################
# Wald estimates
wald_result <- wald_estimates(
sim_results,
bs_samples = beta_hat_star, alpha = 0.05
)
bs_results[["wald"]][b, ] <- wald_result
####################
# Percentile estimates
percentile_result <- percentile_estimates(
sim_results,
bs_samples = beta_hat_star, alpha = 0.05
)
bs_results[["percentile"]][b, ] <- percentile_result
####################
# Bootstrap with t estimates
# Step 1: loop to run bootstrap t
boot_mean_b <- rep(NA, nboot_t)
for (k in 1:nboot_t) {
beta_hat_star_k <- sample(beta_hat_star,
size = nrow(sim_results),
replace = TRUE
)
boot_mean_b[k] <- mean(beta_hat_star_k)
}
# Step 2: generate estimates
t_result <- t_estimates(
sim_results,
bs_samples = beta_hat_star, boot_mean_b, alpha = 0.05
)
bs_results[["t"]][b, ] <- t_result
}
return(bs_results)
}
run_bootstrap(sim_results, 100,10)
####################
# Calculate the Wald standard error and CI for all bootstrap runs
wald_estimates <- function(sim_results, bs_samples, alpha = 0.05) {
se_b <- sd(bs_samples)
mean_beta_hat <- mean(sim_results[, "beta_hat"])
ci_lower <- mean_beta_hat + qt(alpha / 2, df = nrow(bs_samples) - 1) * se_b
ci_upper <- mean_beta_hat + qt(1 - alpha / 2, df = nrow(bs_samples) - 1) * se_b
coverage <- mean(sim_results[1, "beta_true"] > ci_lower &
sim_results[1, "beta_true"] < ci_upper)
bs_estimates <- c(mean_beta_hat, se_b, ci_lower, ci_upper, coverage)
names(bs_estimates) <- c("mean_beta_hat", "se_b", "ci_lower", "ci_upper", "coverage")
return(bs_estimates)
}
####################
# Calculate the Wald standard error and percentile-based CI for all bootstrap runs
percentile_estimates <- function(sim_results, bs_samples, alpha = 0.05) {
se_b <- sd(bs_samples)
mean_beta_hat <- mean(sim_results[, "beta_hat"])
ci_lower <- quantile(bs_samples, alpha / 2)
ci_upper <- quantile(bs_samples, 1 - alpha / 2)
coverage <- mean(sim_results[1, "beta_true"] > ci_lower &
sim_results[1, "beta_true"] < ci_upper)
bs_estimates <- c(mean_beta_hat, se_b, ci_lower, ci_upper, coverage)
names(bs_estimates) <- c("mean_beta_hat", "se_b", "ci_lower", "ci_upper", "coverage")
return(bs_estimates)
}
beta_hat_star
beta_hat_star <- sample(sim_results[, "beta_hat"],
size = nrow(sim_results),
replace = TRUE
)
beta_hat_star
wald_estimates(sim_results, beta_hat_star)
sd(beta_hat_star)
mean(sim_results[, "beta_hat"])
qt(alpha / 2, df = nrow(beta_hat_star) - 1)
qt(0.05 / 2, df = nrow(beta_hat_star) - 1)
nrow(beta_hat_star)
length
####################
# Calculate the Wald standard error and CI for all bootstrap runs
wald_estimates <- function(sim_results, bs_samples, alpha = 0.05) {
se_b <- sd(bs_samples)
mean_beta_hat <- mean(sim_results[, "beta_hat"])
ci_lower <- mean_beta_hat + qt(alpha / 2, df = length(bs_samples) - 1) * se_b
ci_upper <- mean_beta_hat + qt(1 - alpha / 2, df = length(bs_samples) - 1) * se_b
coverage <- mean(sim_results[1, "beta_true"] > ci_lower &
sim_results[1, "beta_true"] < ci_upper)
bs_estimates <- c(mean_beta_hat, se_b, ci_lower, ci_upper, coverage)
names(bs_estimates) <- c("mean_beta_hat", "se_b", "ci_lower", "ci_upper", "coverage")
return(bs_estimates)
}
wald_estimates(sim_results, beta_hat_star)
perncentile_estimates(sim_results, beta_hat_star)
percentile_estimates(sim_results, beta_hat_star)
####################
# Run bootstrap on simulation results
run_bootstrap <- function(sim_results, nboot, nboot_t) {
# Create three matrices to store Wald, percentile, and t estimates
bs_results <- replicate(3, matrix(NA,
nrow = nboot, ncol = 5,
dimnames = list(
NULL, c("mean_beta_hat", "se_b", "ci_lower", "ci_upper", "coverage")
)
), simplify=FALSE)
names(bs_results) <- c("wald", "percentile", "t")
# beta_hat <- mean(sim_results[, "beta_hat"])
# loop over bootstrap samples
for (b in 1:nboot) {
# sample with replacement from the original data
beta_hat_star <- sample(sim_results[, "beta_hat"],
size = nrow(sim_results),
replace = TRUE
)
####################
# Wald estimates
wald_result <- wald_estimates(
sim_results,
bs_samples = beta_hat_star, alpha = 0.05
)
bs_results[["wald"]][b, ] <- wald_result
####################
# Percentile estimates
percentile_result <- percentile_estimates(
sim_results,
bs_samples = beta_hat_star, alpha = 0.05
)
bs_results[["percentile"]][b, ] <- percentile_result
####################
# Bootstrap with t estimates
# Step 1: loop to run bootstrap t
boot_mean_b <- rep(NA, nboot_t)
for (k in 1:nboot_t) {
beta_hat_star_k <- sample(beta_hat_star,
size = nrow(sim_results),
replace = TRUE
)
boot_mean_b[k] <- mean(beta_hat_star_k)
}
# Step 2: generate estimates
t_result <- t_estimates(
sim_results,
bs_samples = beta_hat_star, boot_mean_b, alpha = 0.05
)
bs_results[["t"]][b, ] <- t_result
}
return(bs_results)
}
rm(beta_hat_star)
run_bootstrap(sim_results, 100, 10)
####################
# Calculate the bootstrap t standard error and CI for all bootstrap runs
t_estimates <- function(sim_results, bs_samples, boot_mean_b, alpha = 0.05) {
se_b <- sd(bs_samples)
mean_beta_hat <- mean(sim_results[, "beta_hat"])
# Estimate t_star
se_star <- sd(boot_mean_b) # used only for estimating t_star
t_star <- (mean(bs_samples) - mean_beta_hat) / se_star
# Estimate CI
t_quants <- quantile(t_star, probs = c(alpha / 2, 1 - (alpha / 2)))
ci_lower <- mean_beta_hat - t_quants[2] * se_b
ci_upper <- mean_beta_hat - t_quants[1] * se_b
coverage <- mean(sim_results[1, "beta_true"] > ci_lower &
sim_results[1, "beta_true"] < ci_upper)
bs_estimates <- c(mean_beta_hat, se_b, ci_lower, ci_upper, coverage)
names(bs_estimates) <- c("mean_beta_hat", "se_b", "ci_lower", "ci_upper", "coverage")
return(bs_estimates)
}
####################
# Calculate the bootstrap t standard error and CI for all bootstrap runs
t_estimates <- function(sim_results, bs_samples, boot_mean_b, alpha = 0.05) {
se_b <- sd(bs_samples)
mean_beta_hat <- mean(sim_results[, "beta_hat"])
# Estimate t_star
se_star <- sd(boot_mean_b) # used only for estimating t_star
t_star <- (mean(bs_samples) - mean_beta_hat) / se_star
# Estimate CI
t_quants <- quantile(t_star, probs = c(alpha / 2, 1 - (alpha / 2)))
ci_lower <- mean_beta_hat - t_quants[2] * se_b
ci_upper <- mean_beta_hat - t_quants[1] * se_b
coverage <- mean(sim_results[1, "beta_true"] > ci_lower &
sim_results[1, "beta_true"] < ci_upper)
bs_estimates <- c(mean_beta_hat, se_b, ci_lower, ci_upper, coverage)
names(bs_estimates) <- c("mean_beta_hat", "se_b", "ci_lower", "ci_upper", "coverage")
return(bs_estimates)
}
run_bootstrap(sim_results, 100, 10)
beta_hat_star <- sample(sim_results[, "beta_hat"],
size = nrow(sim_results),
replace = TRUE
)
nboot_t=100
for (k in 1:nboot_t) {
beta_hat_star_k <- sample(beta_hat_star,
size = nrow(sim_results),
replace = TRUE
)
boot_mean_b[k] <- mean(beta_hat_star_k)
}
boot_mean_b <- rep(NA, nboot_t)
for (k in 1:nboot_t) {
beta_hat_star_k <- sample(beta_hat_star,
size = nrow(sim_results),
replace = TRUE
)
boot_mean_b[k] <- mean(beta_hat_star_k)
}\
boot_mean_b <- rep(NA, nboot_t)
for (k in 1:nboot_t) {
beta_hat_star_k <- sample(beta_hat_star,
size = nrow(sim_results),
replace = TRUE
)
boot_mean_b[k] <- mean(beta_hat_star_k)
}
boot_mean_b
t_result <- t_estimates(
sim_results,
bs_samples = beta_hat_star, boot_mean_b, alpha = 0.05
)
t_result
se_star <- sd(boot_mean_b)
se_star
(mean(bs_samples) - mean_beta_hat) / se_star
mean_beta_hat <- mean(sim_results[, "beta_hat"])
(mean(beta_hat_star) - mean_beta_hat) / se_star
